// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: bidrequest.proto

package gen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Bidrequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Imp           []*Imp                 `protobuf:"bytes,2,rep,name=imp,proto3" json:"imp,omitempty"`
	Site          *Site                  `protobuf:"bytes,3,opt,name=site,proto3" json:"site,omitempty"`
	App           *App                   `protobuf:"bytes,4,opt,name=app,proto3" json:"app,omitempty"`
	Device        *Device                `protobuf:"bytes,5,opt,name=device,proto3" json:"device,omitempty"`
	User          *User                  `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
	Test          int32                  `protobuf:"varint,7,opt,name=test,proto3" json:"test,omitempty"`
	At            int32                  `protobuf:"varint,8,opt,name=at,proto3" json:"at,omitempty"`
	Tmax          int32                  `protobuf:"varint,9,opt,name=tmax,proto3" json:"tmax,omitempty"`
	Wseat         []string               `protobuf:"bytes,10,rep,name=wseat,proto3" json:"wseat,omitempty"`
	Bseat         []string               `protobuf:"bytes,11,rep,name=bseat,proto3" json:"bseat,omitempty"`
	Allimps       int32                  `protobuf:"varint,12,opt,name=allimps,proto3" json:"allimps,omitempty"`
	Cur           []string               `protobuf:"bytes,13,rep,name=cur,proto3" json:"cur,omitempty"`
	Wlang         []string               `protobuf:"bytes,14,rep,name=wlang,proto3" json:"wlang,omitempty"`
	Bcat          []string               `protobuf:"bytes,15,rep,name=bcat,proto3" json:"bcat,omitempty"`
	Badv          []string               `protobuf:"bytes,16,rep,name=badv,proto3" json:"badv,omitempty"`
	Bapp          []string               `protobuf:"bytes,17,rep,name=bapp,proto3" json:"bapp,omitempty"`
	Source        *Source                `protobuf:"bytes,18,opt,name=source,proto3" json:"source,omitempty"`
	Regs          *Regs                  `protobuf:"bytes,19,opt,name=regs,proto3" json:"regs,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Bidrequest) Reset() {
	*x = Bidrequest{}
	mi := &file_bidrequest_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bidrequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bidrequest) ProtoMessage() {}

func (x *Bidrequest) ProtoReflect() protoreflect.Message {
	mi := &file_bidrequest_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bidrequest.ProtoReflect.Descriptor instead.
func (*Bidrequest) Descriptor() ([]byte, []int) {
	return file_bidrequest_proto_rawDescGZIP(), []int{0}
}

func (x *Bidrequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Bidrequest) GetImp() []*Imp {
	if x != nil {
		return x.Imp
	}
	return nil
}

func (x *Bidrequest) GetSite() *Site {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *Bidrequest) GetApp() *App {
	if x != nil {
		return x.App
	}
	return nil
}

func (x *Bidrequest) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Bidrequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *Bidrequest) GetTest() int32 {
	if x != nil {
		return x.Test
	}
	return 0
}

func (x *Bidrequest) GetAt() int32 {
	if x != nil {
		return x.At
	}
	return 0
}

func (x *Bidrequest) GetTmax() int32 {
	if x != nil {
		return x.Tmax
	}
	return 0
}

func (x *Bidrequest) GetWseat() []string {
	if x != nil {
		return x.Wseat
	}
	return nil
}

func (x *Bidrequest) GetBseat() []string {
	if x != nil {
		return x.Bseat
	}
	return nil
}

func (x *Bidrequest) GetAllimps() int32 {
	if x != nil {
		return x.Allimps
	}
	return 0
}

func (x *Bidrequest) GetCur() []string {
	if x != nil {
		return x.Cur
	}
	return nil
}

func (x *Bidrequest) GetWlang() []string {
	if x != nil {
		return x.Wlang
	}
	return nil
}

func (x *Bidrequest) GetBcat() []string {
	if x != nil {
		return x.Bcat
	}
	return nil
}

func (x *Bidrequest) GetBadv() []string {
	if x != nil {
		return x.Badv
	}
	return nil
}

func (x *Bidrequest) GetBapp() []string {
	if x != nil {
		return x.Bapp
	}
	return nil
}

func (x *Bidrequest) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Bidrequest) GetRegs() *Regs {
	if x != nil {
		return x.Regs
	}
	return nil
}

func (x *Bidrequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type Source struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fd            int32                  `protobuf:"varint,1,opt,name=fd,proto3" json:"fd,omitempty"`
	Tid           string                 `protobuf:"bytes,2,opt,name=tid,proto3" json:"tid,omitempty"`
	Pchain        string                 `protobuf:"bytes,3,opt,name=pchain,proto3" json:"pchain,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Source) Reset() {
	*x = Source{}
	mi := &file_bidrequest_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_bidrequest_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_bidrequest_proto_rawDescGZIP(), []int{1}
}

func (x *Source) GetFd() int32 {
	if x != nil {
		return x.Fd
	}
	return 0
}

func (x *Source) GetTid() string {
	if x != nil {
		return x.Tid
	}
	return ""
}

func (x *Source) GetPchain() string {
	if x != nil {
		return x.Pchain
	}
	return ""
}

type Regs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Coppa         int32                  `protobuf:"varint,1,opt,name=coppa,proto3" json:"coppa,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Regs) Reset() {
	*x = Regs{}
	mi := &file_bidrequest_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Regs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Regs) ProtoMessage() {}

func (x *Regs) ProtoReflect() protoreflect.Message {
	mi := &file_bidrequest_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Regs.ProtoReflect.Descriptor instead.
func (*Regs) Descriptor() ([]byte, []int) {
	return file_bidrequest_proto_rawDescGZIP(), []int{2}
}

func (x *Regs) GetCoppa() int32 {
	if x != nil {
		return x.Coppa
	}
	return 0
}

type Imp struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Metric            []*Metric              `protobuf:"bytes,2,rep,name=metric,proto3" json:"metric,omitempty"`
	Banner            *Banner                `protobuf:"bytes,3,opt,name=banner,proto3" json:"banner,omitempty"`
	Video             *Video                 `protobuf:"bytes,4,opt,name=video,proto3" json:"video,omitempty"`
	Audio             *Audio                 `protobuf:"bytes,5,opt,name=audio,proto3" json:"audio,omitempty"`
	Native            *Native                `protobuf:"bytes,6,opt,name=native,proto3" json:"native,omitempty"`
	Pmp               *Pmp                   `protobuf:"bytes,7,opt,name=pmp,proto3" json:"pmp,omitempty"`
	Displaymanager    string                 `protobuf:"bytes,8,opt,name=displaymanager,proto3" json:"displaymanager,omitempty"`
	Displaymanagerver string                 `protobuf:"bytes,9,opt,name=displaymanagerver,proto3" json:"displaymanagerver,omitempty"`
	Instl             int32                  `protobuf:"varint,10,opt,name=instl,proto3" json:"instl,omitempty"`
	Tagid             string                 `protobuf:"bytes,11,opt,name=tagid,proto3" json:"tagid,omitempty"`
	Bidfloor          float32                `protobuf:"fixed32,12,opt,name=bidfloor,proto3" json:"bidfloor,omitempty"`
	Bidfloorcur       string                 `protobuf:"bytes,13,opt,name=bidfloorcur,proto3" json:"bidfloorcur,omitempty"`
	Clickbrowser      int32                  `protobuf:"varint,14,opt,name=clickbrowser,proto3" json:"clickbrowser,omitempty"`
	Secure            int32                  `protobuf:"varint,15,opt,name=secure,proto3" json:"secure,omitempty"`
	Iframebuster      []string               `protobuf:"bytes,16,rep,name=iframebuster,proto3" json:"iframebuster,omitempty"`
	Exp               int32                  `protobuf:"varint,17,opt,name=exp,proto3" json:"exp,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Imp) Reset() {
	*x = Imp{}
	mi := &file_bidrequest_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Imp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Imp) ProtoMessage() {}

func (x *Imp) ProtoReflect() protoreflect.Message {
	mi := &file_bidrequest_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Imp.ProtoReflect.Descriptor instead.
func (*Imp) Descriptor() ([]byte, []int) {
	return file_bidrequest_proto_rawDescGZIP(), []int{3}
}

func (x *Imp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Imp) GetMetric() []*Metric {
	if x != nil {
		return x.Metric
	}
	return nil
}

func (x *Imp) GetBanner() *Banner {
	if x != nil {
		return x.Banner
	}
	return nil
}

func (x *Imp) GetVideo() *Video {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *Imp) GetAudio() *Audio {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *Imp) GetNative() *Native {
	if x != nil {
		return x.Native
	}
	return nil
}

func (x *Imp) GetPmp() *Pmp {
	if x != nil {
		return x.Pmp
	}
	return nil
}

func (x *Imp) GetDisplaymanager() string {
	if x != nil {
		return x.Displaymanager
	}
	return ""
}

func (x *Imp) GetDisplaymanagerver() string {
	if x != nil {
		return x.Displaymanagerver
	}
	return ""
}

func (x *Imp) GetInstl() int32 {
	if x != nil {
		return x.Instl
	}
	return 0
}

func (x *Imp) GetTagid() string {
	if x != nil {
		return x.Tagid
	}
	return ""
}

func (x *Imp) GetBidfloor() float32 {
	if x != nil {
		return x.Bidfloor
	}
	return 0
}

func (x *Imp) GetBidfloorcur() string {
	if x != nil {
		return x.Bidfloorcur
	}
	return ""
}

func (x *Imp) GetClickbrowser() int32 {
	if x != nil {
		return x.Clickbrowser
	}
	return 0
}

func (x *Imp) GetSecure() int32 {
	if x != nil {
		return x.Secure
	}
	return 0
}

func (x *Imp) GetIframebuster() []string {
	if x != nil {
		return x.Iframebuster
	}
	return nil
}

func (x *Imp) GetExp() int32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

type Metric struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Value         float32                `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
	Vendor        string                 `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Metric) Reset() {
	*x = Metric{}
	mi := &file_bidrequest_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metric) ProtoMessage() {}

func (x *Metric) ProtoReflect() protoreflect.Message {
	mi := &file_bidrequest_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metric.ProtoReflect.Descriptor instead.
func (*Metric) Descriptor() ([]byte, []int) {
	return file_bidrequest_proto_rawDescGZIP(), []int{4}
}

func (x *Metric) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Metric) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Metric) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

type Banner struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Format        []string               `protobuf:"bytes,1,rep,name=format,proto3" json:"format,omitempty"`
	W             int32                  `protobuf:"varint,2,opt,name=w,proto3" json:"w,omitempty"`
	H             int32                  `protobuf:"varint,3,opt,name=h,proto3" json:"h,omitempty"`
	Btype         []int32                `protobuf:"varint,4,rep,packed,name=btype,proto3" json:"btype,omitempty"`
	Battr         []int32                `protobuf:"varint,5,rep,packed,name=battr,proto3" json:"battr,omitempty"`
	Pos           int32                  `protobuf:"varint,6,opt,name=pos,proto3" json:"pos,omitempty"`
	Mimes         []string               `protobuf:"bytes,7,rep,name=mimes,proto3" json:"mimes,omitempty"`
	Topframe      int32                  `protobuf:"varint,8,opt,name=topframe,proto3" json:"topframe,omitempty"`
	Expdir        []int32                `protobuf:"varint,9,rep,packed,name=expdir,proto3" json:"expdir,omitempty"`
	Api           []int32                `protobuf:"varint,10,rep,packed,name=api,proto3" json:"api,omitempty"`
	Id            string                 `protobuf:"bytes,11,opt,name=id,proto3" json:"id,omitempty"`
	Vcm           int32                  `protobuf:"varint,12,opt,name=vcm,proto3" json:"vcm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Banner) Reset() {
	*x = Banner{}
	mi := &file_bidrequest_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Banner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Banner) ProtoMessage() {}

func (x *Banner) ProtoReflect() protoreflect.Message {
	mi := &file_bidrequest_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Banner.ProtoReflect.Descriptor instead.
func (*Banner) Descriptor() ([]byte, []int) {
	return file_bidrequest_proto_rawDescGZIP(), []int{5}
}

func (x *Banner) GetFormat() []string {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *Banner) GetW() int32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *Banner) GetH() int32 {
	if x != nil {
		return x.H
	}
	return 0
}

func (x *Banner) GetBtype() []int32 {
	if x != nil {
		return x.Btype
	}
	return nil
}

func (x *Banner) GetBattr() []int32 {
	if x != nil {
		return x.Battr
	}
	return nil
}

func (x *Banner) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *Banner) GetMimes() []string {
	if x != nil {
		return x.Mimes
	}
	return nil
}

func (x *Banner) GetTopframe() int32 {
	if x != nil {
		return x.Topframe
	}
	return 0
}

func (x *Banner) GetExpdir() []int32 {
	if x != nil {
		return x.Expdir
	}
	return nil
}

func (x *Banner) GetApi() []int32 {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *Banner) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Banner) GetVcm() int32 {
	if x != nil {
		return x.Vcm
	}
	return 0
}

type Video struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Mimes          []string               `protobuf:"bytes,1,rep,name=mimes,proto3" json:"mimes,omitempty"`
	Minduration    int32                  `protobuf:"varint,2,opt,name=minduration,proto3" json:"minduration,omitempty"`
	Maxduration    int32                  `protobuf:"varint,3,opt,name=maxduration,proto3" json:"maxduration,omitempty"`
	Protocols      []int32                `protobuf:"varint,4,rep,packed,name=protocols,proto3" json:"protocols,omitempty"`
	W              int32                  `protobuf:"varint,5,opt,name=w,proto3" json:"w,omitempty"`
	H              int32                  `protobuf:"varint,6,opt,name=h,proto3" json:"h,omitempty"`
	Startdelay     int32                  `protobuf:"varint,7,opt,name=startdelay,proto3" json:"startdelay,omitempty"`
	Placement      int32                  `protobuf:"varint,8,opt,name=placement,proto3" json:"placement,omitempty"`
	Linearity      int32                  `protobuf:"varint,9,opt,name=linearity,proto3" json:"linearity,omitempty"`
	Skip           int32                  `protobuf:"varint,10,opt,name=skip,proto3" json:"skip,omitempty"`
	Skipmin        int32                  `protobuf:"varint,11,opt,name=skipmin,proto3" json:"skipmin,omitempty"`
	Skipafter      int32                  `protobuf:"varint,12,opt,name=skipafter,proto3" json:"skipafter,omitempty"`
	Sequence       int32                  `protobuf:"varint,13,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Battr          []int32                `protobuf:"varint,14,rep,packed,name=battr,proto3" json:"battr,omitempty"`
	Maxextended    int32                  `protobuf:"varint,15,opt,name=maxextended,proto3" json:"maxextended,omitempty"`
	Minbitrate     int32                  `protobuf:"varint,16,opt,name=minbitrate,proto3" json:"minbitrate,omitempty"`
	Maxbitrate     int32                  `protobuf:"varint,17,opt,name=maxbitrate,proto3" json:"maxbitrate,omitempty"`
	Boxingallowed  int32                  `protobuf:"varint,18,opt,name=boxingallowed,proto3" json:"boxingallowed,omitempty"`
	Playbackmethod []int32                `protobuf:"varint,19,rep,packed,name=playbackmethod,proto3" json:"playbackmethod,omitempty"`
	Playbackend    int32                  `protobuf:"varint,20,opt,name=playbackend,proto3" json:"playbackend,omitempty"`
	Delivery       []int32                `protobuf:"varint,21,rep,packed,name=delivery,proto3" json:"delivery,omitempty"`
	Pos            int32                  `protobuf:"varint,22,opt,name=pos,proto3" json:"pos,omitempty"`
	Companionad    []*Banner              `protobuf:"bytes,23,rep,name=companionad,proto3" json:"companionad,omitempty"`
	Api            []int32                `protobuf:"varint,24,rep,packed,name=api,proto3" json:"api,omitempty"`
	Companiontype  []int32                `protobuf:"varint,25,rep,packed,name=companiontype,proto3" json:"companiontype,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Video) Reset() {
	*x = Video{}
	mi := &file_bidrequest_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Video) ProtoMessage() {}

func (x *Video) ProtoReflect() protoreflect.Message {
	mi := &file_bidrequest_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Video.ProtoReflect.Descriptor instead.
func (*Video) Descriptor() ([]byte, []int) {
	return file_bidrequest_proto_rawDescGZIP(), []int{6}
}

func (x *Video) GetMimes() []string {
	if x != nil {
		return x.Mimes
	}
	return nil
}

func (x *Video) GetMinduration() int32 {
	if x != nil {
		return x.Minduration
	}
	return 0
}

func (x *Video) GetMaxduration() int32 {
	if x != nil {
		return x.Maxduration
	}
	return 0
}

func (x *Video) GetProtocols() []int32 {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *Video) GetW() int32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *Video) GetH() int32 {
	if x != nil {
		return x.H
	}
	return 0
}

func (x *Video) GetStartdelay() int32 {
	if x != nil {
		return x.Startdelay
	}
	return 0
}

func (x *Video) GetPlacement() int32 {
	if x != nil {
		return x.Placement
	}
	return 0
}

func (x *Video) GetLinearity() int32 {
	if x != nil {
		return x.Linearity
	}
	return 0
}

func (x *Video) GetSkip() int32 {
	if x != nil {
		return x.Skip
	}
	return 0
}

func (x *Video) GetSkipmin() int32 {
	if x != nil {
		return x.Skipmin
	}
	return 0
}

func (x *Video) GetSkipafter() int32 {
	if x != nil {
		return x.Skipafter
	}
	return 0
}

func (x *Video) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Video) GetBattr() []int32 {
	if x != nil {
		return x.Battr
	}
	return nil
}

func (x *Video) GetMaxextended() int32 {
	if x != nil {
		return x.Maxextended
	}
	return 0
}

func (x *Video) GetMinbitrate() int32 {
	if x != nil {
		return x.Minbitrate
	}
	return 0
}

func (x *Video) GetMaxbitrate() int32 {
	if x != nil {
		return x.Maxbitrate
	}
	return 0
}

func (x *Video) GetBoxingallowed() int32 {
	if x != nil {
		return x.Boxingallowed
	}
	return 0
}

func (x *Video) GetPlaybackmethod() []int32 {
	if x != nil {
		return x.Playbackmethod
	}
	return nil
}

func (x *Video) GetPlaybackend() int32 {
	if x != nil {
		return x.Playbackend
	}
	return 0
}

func (x *Video) GetDelivery() []int32 {
	if x != nil {
		return x.Delivery
	}
	return nil
}

func (x *Video) GetPos() int32 {
	if x != nil {
		return x.Pos
	}
	return 0
}

func (x *Video) GetCompanionad() []*Banner {
	if x != nil {
		return x.Companionad
	}
	return nil
}

func (x *Video) GetApi() []int32 {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *Video) GetCompaniontype() []int32 {
	if x != nil {
		return x.Companiontype
	}
	return nil
}

type Audio struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Mimes         []string               `protobuf:"bytes,1,rep,name=mimes,proto3" json:"mimes,omitempty"`
	Minduration   int32                  `protobuf:"varint,2,opt,name=minduration,proto3" json:"minduration,omitempty"`
	Maxduration   int32                  `protobuf:"varint,3,opt,name=maxduration,proto3" json:"maxduration,omitempty"`
	Protocols     []int32                `protobuf:"varint,4,rep,packed,name=protocols,proto3" json:"protocols,omitempty"`
	Startdelay    int32                  `protobuf:"varint,5,opt,name=startdelay,proto3" json:"startdelay,omitempty"`
	Sequence      int32                  `protobuf:"varint,6,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Battr         []int32                `protobuf:"varint,7,rep,packed,name=battr,proto3" json:"battr,omitempty"`
	Maxextended   int32                  `protobuf:"varint,8,opt,name=maxextended,proto3" json:"maxextended,omitempty"`
	Minbitrate    int32                  `protobuf:"varint,9,opt,name=minbitrate,proto3" json:"minbitrate,omitempty"`
	Maxbitrate    int32                  `protobuf:"varint,10,opt,name=maxbitrate,proto3" json:"maxbitrate,omitempty"`
	Delivery      []int32                `protobuf:"varint,11,rep,packed,name=delivery,proto3" json:"delivery,omitempty"`
	Companionad   []*Banner              `protobuf:"bytes,12,rep,name=companionad,proto3" json:"companionad,omitempty"`
	Api           []int32                `protobuf:"varint,13,rep,packed,name=api,proto3" json:"api,omitempty"`
	Companiontype []int32                `protobuf:"varint,14,rep,packed,name=companiontype,proto3" json:"companiontype,omitempty"`
	Maxseq        int32                  `protobuf:"varint,15,opt,name=maxseq,proto3" json:"maxseq,omitempty"`
	Feed          int32                  `protobuf:"varint,16,opt,name=feed,proto3" json:"feed,omitempty"`
	Stitched      int32                  `protobuf:"varint,17,opt,name=stitched,proto3" json:"stitched,omitempty"`
	Nvol          int32                  `protobuf:"varint,18,opt,name=nvol,proto3" json:"nvol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Audio) Reset() {
	*x = Audio{}
	mi := &file_bidrequest_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Audio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Audio) ProtoMessage() {}

func (x *Audio) ProtoReflect() protoreflect.Message {
	mi := &file_bidrequest_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Audio.ProtoReflect.Descriptor instead.
func (*Audio) Descriptor() ([]byte, []int) {
	return file_bidrequest_proto_rawDescGZIP(), []int{7}
}

func (x *Audio) GetMimes() []string {
	if x != nil {
		return x.Mimes
	}
	return nil
}

func (x *Audio) GetMinduration() int32 {
	if x != nil {
		return x.Minduration
	}
	return 0
}

func (x *Audio) GetMaxduration() int32 {
	if x != nil {
		return x.Maxduration
	}
	return 0
}

func (x *Audio) GetProtocols() []int32 {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *Audio) GetStartdelay() int32 {
	if x != nil {
		return x.Startdelay
	}
	return 0
}

func (x *Audio) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Audio) GetBattr() []int32 {
	if x != nil {
		return x.Battr
	}
	return nil
}

func (x *Audio) GetMaxextended() int32 {
	if x != nil {
		return x.Maxextended
	}
	return 0
}

func (x *Audio) GetMinbitrate() int32 {
	if x != nil {
		return x.Minbitrate
	}
	return 0
}

func (x *Audio) GetMaxbitrate() int32 {
	if x != nil {
		return x.Maxbitrate
	}
	return 0
}

func (x *Audio) GetDelivery() []int32 {
	if x != nil {
		return x.Delivery
	}
	return nil
}

func (x *Audio) GetCompanionad() []*Banner {
	if x != nil {
		return x.Companionad
	}
	return nil
}

func (x *Audio) GetApi() []int32 {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *Audio) GetCompaniontype() []int32 {
	if x != nil {
		return x.Companiontype
	}
	return nil
}

func (x *Audio) GetMaxseq() int32 {
	if x != nil {
		return x.Maxseq
	}
	return 0
}

func (x *Audio) GetFeed() int32 {
	if x != nil {
		return x.Feed
	}
	return 0
}

func (x *Audio) GetStitched() int32 {
	if x != nil {
		return x.Stitched
	}
	return 0
}

func (x *Audio) GetNvol() int32 {
	if x != nil {
		return x.Nvol
	}
	return 0
}

type Native struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Request       string                 `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Ver           string                 `protobuf:"bytes,2,opt,name=ver,proto3" json:"ver,omitempty"`
	Api           []int32                `protobuf:"varint,3,rep,packed,name=api,proto3" json:"api,omitempty"`
	Battr         []int32                `protobuf:"varint,4,rep,packed,name=battr,proto3" json:"battr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Native) Reset() {
	*x = Native{}
	mi := &file_bidrequest_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Native) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Native) ProtoMessage() {}

func (x *Native) ProtoReflect() protoreflect.Message {
	mi := &file_bidrequest_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Native.ProtoReflect.Descriptor instead.
func (*Native) Descriptor() ([]byte, []int) {
	return file_bidrequest_proto_rawDescGZIP(), []int{8}
}

func (x *Native) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

func (x *Native) GetVer() string {
	if x != nil {
		return x.Ver
	}
	return ""
}

func (x *Native) GetApi() []int32 {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *Native) GetBattr() []int32 {
	if x != nil {
		return x.Battr
	}
	return nil
}

type Format struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	W             int32                  `protobuf:"varint,1,opt,name=w,proto3" json:"w,omitempty"`
	H             int32                  `protobuf:"varint,2,opt,name=h,proto3" json:"h,omitempty"`
	Wratio        int32                  `protobuf:"varint,3,opt,name=wratio,proto3" json:"wratio,omitempty"`
	Hratio        int32                  `protobuf:"varint,4,opt,name=hratio,proto3" json:"hratio,omitempty"`
	Wmin          int32                  `protobuf:"varint,5,opt,name=wmin,proto3" json:"wmin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Format) Reset() {
	*x = Format{}
	mi := &file_bidrequest_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Format) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Format) ProtoMessage() {}

func (x *Format) ProtoReflect() protoreflect.Message {
	mi := &file_bidrequest_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Format.ProtoReflect.Descriptor instead.
func (*Format) Descriptor() ([]byte, []int) {
	return file_bidrequest_proto_rawDescGZIP(), []int{9}
}

func (x *Format) GetW() int32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *Format) GetH() int32 {
	if x != nil {
		return x.H
	}
	return 0
}

func (x *Format) GetWratio() int32 {
	if x != nil {
		return x.Wratio
	}
	return 0
}

func (x *Format) GetHratio() int32 {
	if x != nil {
		return x.Hratio
	}
	return 0
}

func (x *Format) GetWmin() int32 {
	if x != nil {
		return x.Wmin
	}
	return 0
}

type Pmp struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	PrivateAuction int32                  `protobuf:"varint,1,opt,name=private_auction,json=privateAuction,proto3" json:"private_auction,omitempty"`
	Deals          []*Deal                `protobuf:"bytes,2,rep,name=deals,proto3" json:"deals,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Pmp) Reset() {
	*x = Pmp{}
	mi := &file_bidrequest_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pmp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pmp) ProtoMessage() {}

func (x *Pmp) ProtoReflect() protoreflect.Message {
	mi := &file_bidrequest_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pmp.ProtoReflect.Descriptor instead.
func (*Pmp) Descriptor() ([]byte, []int) {
	return file_bidrequest_proto_rawDescGZIP(), []int{10}
}

func (x *Pmp) GetPrivateAuction() int32 {
	if x != nil {
		return x.PrivateAuction
	}
	return 0
}

func (x *Pmp) GetDeals() []*Deal {
	if x != nil {
		return x.Deals
	}
	return nil
}

type Deal struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Bidfloor      float32                `protobuf:"fixed32,2,opt,name=bidfloor,proto3" json:"bidfloor,omitempty"`
	Bidfloorcur   string                 `protobuf:"bytes,3,opt,name=bidfloorcur,proto3" json:"bidfloorcur,omitempty"`
	At            int32                  `protobuf:"varint,4,opt,name=at,proto3" json:"at,omitempty"`
	Wseat         []string               `protobuf:"bytes,5,rep,name=wseat,proto3" json:"wseat,omitempty"`
	Wadomain      []string               `protobuf:"bytes,6,rep,name=wadomain,proto3" json:"wadomain,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Deal) Reset() {
	*x = Deal{}
	mi := &file_bidrequest_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Deal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deal) ProtoMessage() {}

func (x *Deal) ProtoReflect() protoreflect.Message {
	mi := &file_bidrequest_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deal.ProtoReflect.Descriptor instead.
func (*Deal) Descriptor() ([]byte, []int) {
	return file_bidrequest_proto_rawDescGZIP(), []int{11}
}

func (x *Deal) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Deal) GetBidfloor() float32 {
	if x != nil {
		return x.Bidfloor
	}
	return 0
}

func (x *Deal) GetBidfloorcur() string {
	if x != nil {
		return x.Bidfloorcur
	}
	return ""
}

func (x *Deal) GetAt() int32 {
	if x != nil {
		return x.At
	}
	return 0
}

func (x *Deal) GetWseat() []string {
	if x != nil {
		return x.Wseat
	}
	return nil
}

func (x *Deal) GetWadomain() []string {
	if x != nil {
		return x.Wadomain
	}
	return nil
}

type Site struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Domain        string                 `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	Cat           []string               `protobuf:"bytes,4,rep,name=cat,proto3" json:"cat,omitempty"`
	Sectioncat    []string               `protobuf:"bytes,5,rep,name=sectioncat,proto3" json:"sectioncat,omitempty"`
	Pagecat       []string               `protobuf:"bytes,6,rep,name=pagecat,proto3" json:"pagecat,omitempty"`
	Page          string                 `protobuf:"bytes,7,opt,name=page,proto3" json:"page,omitempty"`
	Ref           string                 `protobuf:"bytes,8,opt,name=ref,proto3" json:"ref,omitempty"`
	Search        string                 `protobuf:"bytes,9,opt,name=search,proto3" json:"search,omitempty"`
	Mobile        int32                  `protobuf:"varint,10,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Privacypolicy int32                  `protobuf:"varint,11,opt,name=privacypolicy,proto3" json:"privacypolicy,omitempty"`
	Publisher     *Publisher             `protobuf:"bytes,12,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Content       *Content               `protobuf:"bytes,13,opt,name=content,proto3" json:"content,omitempty"`
	Keywords      string                 `protobuf:"bytes,14,opt,name=keywords,proto3" json:"keywords,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Site) Reset() {
	*x = Site{}
	mi := &file_bidrequest_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Site) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Site) ProtoMessage() {}

func (x *Site) ProtoReflect() protoreflect.Message {
	mi := &file_bidrequest_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Site.ProtoReflect.Descriptor instead.
func (*Site) Descriptor() ([]byte, []int) {
	return file_bidrequest_proto_rawDescGZIP(), []int{12}
}

func (x *Site) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Site) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Site) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *Site) GetCat() []string {
	if x != nil {
		return x.Cat
	}
	return nil
}

func (x *Site) GetSectioncat() []string {
	if x != nil {
		return x.Sectioncat
	}
	return nil
}

func (x *Site) GetPagecat() []string {
	if x != nil {
		return x.Pagecat
	}
	return nil
}

func (x *Site) GetPage() string {
	if x != nil {
		return x.Page
	}
	return ""
}

func (x *Site) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *Site) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *Site) GetMobile() int32 {
	if x != nil {
		return x.Mobile
	}
	return 0
}

func (x *Site) GetPrivacypolicy() int32 {
	if x != nil {
		return x.Privacypolicy
	}
	return 0
}

func (x *Site) GetPublisher() *Publisher {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *Site) GetContent() *Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Site) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

type App struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Bundle        string                 `protobuf:"bytes,3,opt,name=bundle,proto3" json:"bundle,omitempty"`
	Domain        string                 `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	Storeurl      string                 `protobuf:"bytes,5,opt,name=storeurl,proto3" json:"storeurl,omitempty"`
	Cat           []string               `protobuf:"bytes,6,rep,name=cat,proto3" json:"cat,omitempty"`
	Sectioncat    []string               `protobuf:"bytes,7,rep,name=sectioncat,proto3" json:"sectioncat,omitempty"`
	Pagecat       []string               `protobuf:"bytes,8,rep,name=pagecat,proto3" json:"pagecat,omitempty"`
	Ver           string                 `protobuf:"bytes,9,opt,name=ver,proto3" json:"ver,omitempty"`
	Privacypolicy int32                  `protobuf:"varint,10,opt,name=privacypolicy,proto3" json:"privacypolicy,omitempty"`
	Paid          int32                  `protobuf:"varint,11,opt,name=paid,proto3" json:"paid,omitempty"`
	Publisher     *Publisher             `protobuf:"bytes,12,opt,name=publisher,proto3" json:"publisher,omitempty"`
	Content       *Content               `protobuf:"bytes,13,opt,name=content,proto3" json:"content,omitempty"`
	Keywords      string                 `protobuf:"bytes,14,opt,name=keywords,proto3" json:"keywords,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *App) Reset() {
	*x = App{}
	mi := &file_bidrequest_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*App) ProtoMessage() {}

func (x *App) ProtoReflect() protoreflect.Message {
	mi := &file_bidrequest_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use App.ProtoReflect.Descriptor instead.
func (*App) Descriptor() ([]byte, []int) {
	return file_bidrequest_proto_rawDescGZIP(), []int{13}
}

func (x *App) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *App) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *App) GetBundle() string {
	if x != nil {
		return x.Bundle
	}
	return ""
}

func (x *App) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *App) GetStoreurl() string {
	if x != nil {
		return x.Storeurl
	}
	return ""
}

func (x *App) GetCat() []string {
	if x != nil {
		return x.Cat
	}
	return nil
}

func (x *App) GetSectioncat() []string {
	if x != nil {
		return x.Sectioncat
	}
	return nil
}

func (x *App) GetPagecat() []string {
	if x != nil {
		return x.Pagecat
	}
	return nil
}

func (x *App) GetVer() string {
	if x != nil {
		return x.Ver
	}
	return ""
}

func (x *App) GetPrivacypolicy() int32 {
	if x != nil {
		return x.Privacypolicy
	}
	return 0
}

func (x *App) GetPaid() int32 {
	if x != nil {
		return x.Paid
	}
	return 0
}

func (x *App) GetPublisher() *Publisher {
	if x != nil {
		return x.Publisher
	}
	return nil
}

func (x *App) GetContent() *Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *App) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

type Publisher struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Cat           []string               `protobuf:"bytes,3,rep,name=cat,proto3" json:"cat,omitempty"`
	Domain        string                 `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Publisher) Reset() {
	*x = Publisher{}
	mi := &file_bidrequest_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Publisher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Publisher) ProtoMessage() {}

func (x *Publisher) ProtoReflect() protoreflect.Message {
	mi := &file_bidrequest_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Publisher.ProtoReflect.Descriptor instead.
func (*Publisher) Descriptor() ([]byte, []int) {
	return file_bidrequest_proto_rawDescGZIP(), []int{14}
}

func (x *Publisher) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Publisher) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Publisher) GetCat() []string {
	if x != nil {
		return x.Cat
	}
	return nil
}

func (x *Publisher) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type Content struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Id                 string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Episode            int32                  `protobuf:"varint,2,opt,name=episode,proto3" json:"episode,omitempty"`
	Title              string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Series             string                 `protobuf:"bytes,4,opt,name=series,proto3" json:"series,omitempty"`
	Season             string                 `protobuf:"bytes,5,opt,name=season,proto3" json:"season,omitempty"`
	Artist             string                 `protobuf:"bytes,6,opt,name=artist,proto3" json:"artist,omitempty"`
	Genre              string                 `protobuf:"bytes,7,opt,name=genre,proto3" json:"genre,omitempty"`
	Album              string                 `protobuf:"bytes,8,opt,name=album,proto3" json:"album,omitempty"`
	Isrc               string                 `protobuf:"bytes,9,opt,name=isrc,proto3" json:"isrc,omitempty"`
	Producer           *Producer              `protobuf:"bytes,10,opt,name=producer,proto3" json:"producer,omitempty"`
	Url                string                 `protobuf:"bytes,11,opt,name=url,proto3" json:"url,omitempty"`
	Cat                []string               `protobuf:"bytes,12,rep,name=cat,proto3" json:"cat,omitempty"`
	Prodq              int32                  `protobuf:"varint,13,opt,name=prodq,proto3" json:"prodq,omitempty"`
	Context            int32                  `protobuf:"varint,14,opt,name=context,proto3" json:"context,omitempty"`
	Contentrating      string                 `protobuf:"bytes,15,opt,name=contentrating,proto3" json:"contentrating,omitempty"`
	Userrating         string                 `protobuf:"bytes,16,opt,name=userrating,proto3" json:"userrating,omitempty"`
	Qagmediarating     int32                  `protobuf:"varint,17,opt,name=qagmediarating,proto3" json:"qagmediarating,omitempty"`
	Keywords           string                 `protobuf:"bytes,18,opt,name=keywords,proto3" json:"keywords,omitempty"`
	Livestream         int32                  `protobuf:"varint,19,opt,name=livestream,proto3" json:"livestream,omitempty"`
	Sourcerelationship int32                  `protobuf:"varint,20,opt,name=sourcerelationship,proto3" json:"sourcerelationship,omitempty"`
	Len                int32                  `protobuf:"varint,21,opt,name=len,proto3" json:"len,omitempty"`
	Language           string                 `protobuf:"bytes,22,opt,name=language,proto3" json:"language,omitempty"`
	Embeddable         int32                  `protobuf:"varint,23,opt,name=embeddable,proto3" json:"embeddable,omitempty"`
	Data               []*Data                `protobuf:"bytes,24,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Content) Reset() {
	*x = Content{}
	mi := &file_bidrequest_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_bidrequest_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_bidrequest_proto_rawDescGZIP(), []int{15}
}

func (x *Content) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Content) GetEpisode() int32 {
	if x != nil {
		return x.Episode
	}
	return 0
}

func (x *Content) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Content) GetSeries() string {
	if x != nil {
		return x.Series
	}
	return ""
}

func (x *Content) GetSeason() string {
	if x != nil {
		return x.Season
	}
	return ""
}

func (x *Content) GetArtist() string {
	if x != nil {
		return x.Artist
	}
	return ""
}

func (x *Content) GetGenre() string {
	if x != nil {
		return x.Genre
	}
	return ""
}

func (x *Content) GetAlbum() string {
	if x != nil {
		return x.Album
	}
	return ""
}

func (x *Content) GetIsrc() string {
	if x != nil {
		return x.Isrc
	}
	return ""
}

func (x *Content) GetProducer() *Producer {
	if x != nil {
		return x.Producer
	}
	return nil
}

func (x *Content) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Content) GetCat() []string {
	if x != nil {
		return x.Cat
	}
	return nil
}

func (x *Content) GetProdq() int32 {
	if x != nil {
		return x.Prodq
	}
	return 0
}

func (x *Content) GetContext() int32 {
	if x != nil {
		return x.Context
	}
	return 0
}

func (x *Content) GetContentrating() string {
	if x != nil {
		return x.Contentrating
	}
	return ""
}

func (x *Content) GetUserrating() string {
	if x != nil {
		return x.Userrating
	}
	return ""
}

func (x *Content) GetQagmediarating() int32 {
	if x != nil {
		return x.Qagmediarating
	}
	return 0
}

func (x *Content) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *Content) GetLivestream() int32 {
	if x != nil {
		return x.Livestream
	}
	return 0
}

func (x *Content) GetSourcerelationship() int32 {
	if x != nil {
		return x.Sourcerelationship
	}
	return 0
}

func (x *Content) GetLen() int32 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *Content) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Content) GetEmbeddable() int32 {
	if x != nil {
		return x.Embeddable
	}
	return 0
}

func (x *Content) GetData() []*Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type Producer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Cat           []string               `protobuf:"bytes,3,rep,name=cat,proto3" json:"cat,omitempty"`
	Domain        string                 `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Producer) Reset() {
	*x = Producer{}
	mi := &file_bidrequest_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Producer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Producer) ProtoMessage() {}

func (x *Producer) ProtoReflect() protoreflect.Message {
	mi := &file_bidrequest_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Producer.ProtoReflect.Descriptor instead.
func (*Producer) Descriptor() ([]byte, []int) {
	return file_bidrequest_proto_rawDescGZIP(), []int{16}
}

func (x *Producer) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Producer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Producer) GetCat() []string {
	if x != nil {
		return x.Cat
	}
	return nil
}

func (x *Producer) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type Device struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Ua             string                 `protobuf:"bytes,1,opt,name=ua,proto3" json:"ua,omitempty"`
	Geo            *Geo                   `protobuf:"bytes,2,opt,name=geo,proto3" json:"geo,omitempty"`
	Dnt            int32                  `protobuf:"varint,3,opt,name=dnt,proto3" json:"dnt,omitempty"`
	Lmt            int32                  `protobuf:"varint,4,opt,name=lmt,proto3" json:"lmt,omitempty"`
	Ip             string                 `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	Ipv6           string                 `protobuf:"bytes,6,opt,name=ipv6,proto3" json:"ipv6,omitempty"`
	Devicetype     int32                  `protobuf:"varint,7,opt,name=devicetype,proto3" json:"devicetype,omitempty"`
	Make           string                 `protobuf:"bytes,8,opt,name=make,proto3" json:"make,omitempty"`
	Model          string                 `protobuf:"bytes,9,opt,name=model,proto3" json:"model,omitempty"`
	Os             string                 `protobuf:"bytes,10,opt,name=os,proto3" json:"os,omitempty"`
	Osv            string                 `protobuf:"bytes,11,opt,name=osv,proto3" json:"osv,omitempty"`
	Hwv            string                 `protobuf:"bytes,12,opt,name=hwv,proto3" json:"hwv,omitempty"`
	H              int32                  `protobuf:"varint,13,opt,name=h,proto3" json:"h,omitempty"`
	W              int32                  `protobuf:"varint,14,opt,name=w,proto3" json:"w,omitempty"`
	Ppi            int32                  `protobuf:"varint,15,opt,name=ppi,proto3" json:"ppi,omitempty"`
	Pxratio        float32                `protobuf:"fixed32,16,opt,name=pxratio,proto3" json:"pxratio,omitempty"`
	Js             int32                  `protobuf:"varint,17,opt,name=js,proto3" json:"js,omitempty"`
	Geofetch       int32                  `protobuf:"varint,18,opt,name=geofetch,proto3" json:"geofetch,omitempty"`
	Flashver       string                 `protobuf:"bytes,19,opt,name=flashver,proto3" json:"flashver,omitempty"`
	Language       string                 `protobuf:"bytes,20,opt,name=language,proto3" json:"language,omitempty"`
	Carrier        string                 `protobuf:"bytes,21,opt,name=carrier,proto3" json:"carrier,omitempty"`
	Mccmnc         string                 `protobuf:"bytes,22,opt,name=mccmnc,proto3" json:"mccmnc,omitempty"`
	Connectiontype int32                  `protobuf:"varint,23,opt,name=connectiontype,proto3" json:"connectiontype,omitempty"`
	Ifa            string                 `protobuf:"bytes,24,opt,name=ifa,proto3" json:"ifa,omitempty"`
	Didsha1        string                 `protobuf:"bytes,25,opt,name=didsha1,proto3" json:"didsha1,omitempty"`
	Didmd5         string                 `protobuf:"bytes,26,opt,name=didmd5,proto3" json:"didmd5,omitempty"`
	Dpidsha1       string                 `protobuf:"bytes,27,opt,name=dpidsha1,proto3" json:"dpidsha1,omitempty"`
	Dpidmd5        string                 `protobuf:"bytes,28,opt,name=dpidmd5,proto3" json:"dpidmd5,omitempty"`
	Macsha1        string                 `protobuf:"bytes,29,opt,name=macsha1,proto3" json:"macsha1,omitempty"`
	Macmd5         string                 `protobuf:"bytes,30,opt,name=macmd5,proto3" json:"macmd5,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Device) Reset() {
	*x = Device{}
	mi := &file_bidrequest_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_bidrequest_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_bidrequest_proto_rawDescGZIP(), []int{17}
}

func (x *Device) GetUa() string {
	if x != nil {
		return x.Ua
	}
	return ""
}

func (x *Device) GetGeo() *Geo {
	if x != nil {
		return x.Geo
	}
	return nil
}

func (x *Device) GetDnt() int32 {
	if x != nil {
		return x.Dnt
	}
	return 0
}

func (x *Device) GetLmt() int32 {
	if x != nil {
		return x.Lmt
	}
	return 0
}

func (x *Device) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Device) GetIpv6() string {
	if x != nil {
		return x.Ipv6
	}
	return ""
}

func (x *Device) GetDevicetype() int32 {
	if x != nil {
		return x.Devicetype
	}
	return 0
}

func (x *Device) GetMake() string {
	if x != nil {
		return x.Make
	}
	return ""
}

func (x *Device) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Device) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *Device) GetOsv() string {
	if x != nil {
		return x.Osv
	}
	return ""
}

func (x *Device) GetHwv() string {
	if x != nil {
		return x.Hwv
	}
	return ""
}

func (x *Device) GetH() int32 {
	if x != nil {
		return x.H
	}
	return 0
}

func (x *Device) GetW() int32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *Device) GetPpi() int32 {
	if x != nil {
		return x.Ppi
	}
	return 0
}

func (x *Device) GetPxratio() float32 {
	if x != nil {
		return x.Pxratio
	}
	return 0
}

func (x *Device) GetJs() int32 {
	if x != nil {
		return x.Js
	}
	return 0
}

func (x *Device) GetGeofetch() int32 {
	if x != nil {
		return x.Geofetch
	}
	return 0
}

func (x *Device) GetFlashver() string {
	if x != nil {
		return x.Flashver
	}
	return ""
}

func (x *Device) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *Device) GetCarrier() string {
	if x != nil {
		return x.Carrier
	}
	return ""
}

func (x *Device) GetMccmnc() string {
	if x != nil {
		return x.Mccmnc
	}
	return ""
}

func (x *Device) GetConnectiontype() int32 {
	if x != nil {
		return x.Connectiontype
	}
	return 0
}

func (x *Device) GetIfa() string {
	if x != nil {
		return x.Ifa
	}
	return ""
}

func (x *Device) GetDidsha1() string {
	if x != nil {
		return x.Didsha1
	}
	return ""
}

func (x *Device) GetDidmd5() string {
	if x != nil {
		return x.Didmd5
	}
	return ""
}

func (x *Device) GetDpidsha1() string {
	if x != nil {
		return x.Dpidsha1
	}
	return ""
}

func (x *Device) GetDpidmd5() string {
	if x != nil {
		return x.Dpidmd5
	}
	return ""
}

func (x *Device) GetMacsha1() string {
	if x != nil {
		return x.Macsha1
	}
	return ""
}

func (x *Device) GetMacmd5() string {
	if x != nil {
		return x.Macmd5
	}
	return ""
}

type Geo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lat           float32                `protobuf:"fixed32,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon           float32                `protobuf:"fixed32,2,opt,name=lon,proto3" json:"lon,omitempty"`
	Type          int32                  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Accuracy      int32                  `protobuf:"varint,4,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	Lastfix       int32                  `protobuf:"varint,5,opt,name=lastfix,proto3" json:"lastfix,omitempty"`
	Ipservice     int32                  `protobuf:"varint,6,opt,name=ipservice,proto3" json:"ipservice,omitempty"`
	Country       string                 `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty"`
	Region        string                 `protobuf:"bytes,8,opt,name=region,proto3" json:"region,omitempty"`
	Regionfips104 string                 `protobuf:"bytes,9,opt,name=regionfips104,proto3" json:"regionfips104,omitempty"`
	Metro         string                 `protobuf:"bytes,10,opt,name=metro,proto3" json:"metro,omitempty"`
	City          string                 `protobuf:"bytes,11,opt,name=city,proto3" json:"city,omitempty"`
	Zip           string                 `protobuf:"bytes,12,opt,name=zip,proto3" json:"zip,omitempty"`
	Utcoffset     int32                  `protobuf:"varint,13,opt,name=utcoffset,proto3" json:"utcoffset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Geo) Reset() {
	*x = Geo{}
	mi := &file_bidrequest_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Geo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Geo) ProtoMessage() {}

func (x *Geo) ProtoReflect() protoreflect.Message {
	mi := &file_bidrequest_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Geo.ProtoReflect.Descriptor instead.
func (*Geo) Descriptor() ([]byte, []int) {
	return file_bidrequest_proto_rawDescGZIP(), []int{18}
}

func (x *Geo) GetLat() float32 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Geo) GetLon() float32 {
	if x != nil {
		return x.Lon
	}
	return 0
}

func (x *Geo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Geo) GetAccuracy() int32 {
	if x != nil {
		return x.Accuracy
	}
	return 0
}

func (x *Geo) GetLastfix() int32 {
	if x != nil {
		return x.Lastfix
	}
	return 0
}

func (x *Geo) GetIpservice() int32 {
	if x != nil {
		return x.Ipservice
	}
	return 0
}

func (x *Geo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Geo) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Geo) GetRegionfips104() string {
	if x != nil {
		return x.Regionfips104
	}
	return ""
}

func (x *Geo) GetMetro() string {
	if x != nil {
		return x.Metro
	}
	return ""
}

func (x *Geo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Geo) GetZip() string {
	if x != nil {
		return x.Zip
	}
	return ""
}

func (x *Geo) GetUtcoffset() int32 {
	if x != nil {
		return x.Utcoffset
	}
	return 0
}

type User struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Buyeruid      string                 `protobuf:"bytes,2,opt,name=buyeruid,proto3" json:"buyeruid,omitempty"`
	Yob           int32                  `protobuf:"varint,3,opt,name=yob,proto3" json:"yob,omitempty"`
	Gender        string                 `protobuf:"bytes,4,opt,name=gender,proto3" json:"gender,omitempty"`
	Keywords      string                 `protobuf:"bytes,5,opt,name=keywords,proto3" json:"keywords,omitempty"`
	Customdata    string                 `protobuf:"bytes,6,opt,name=customdata,proto3" json:"customdata,omitempty"`
	Geo           *Geo                   `protobuf:"bytes,7,opt,name=geo,proto3" json:"geo,omitempty"`
	Data          []*Data                `protobuf:"bytes,8,rep,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_bidrequest_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_bidrequest_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_bidrequest_proto_rawDescGZIP(), []int{19}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetBuyeruid() string {
	if x != nil {
		return x.Buyeruid
	}
	return ""
}

func (x *User) GetYob() int32 {
	if x != nil {
		return x.Yob
	}
	return 0
}

func (x *User) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *User) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *User) GetCustomdata() string {
	if x != nil {
		return x.Customdata
	}
	return ""
}

func (x *User) GetGeo() *Geo {
	if x != nil {
		return x.Geo
	}
	return nil
}

func (x *User) GetData() []*Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type Data struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Segment       []*Segment             `protobuf:"bytes,3,rep,name=segment,proto3" json:"segment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Data) Reset() {
	*x = Data{}
	mi := &file_bidrequest_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_bidrequest_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_bidrequest_proto_rawDescGZIP(), []int{20}
}

func (x *Data) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Data) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Data) GetSegment() []*Segment {
	if x != nil {
		return x.Segment
	}
	return nil
}

type Segment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Value         string                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Segment) Reset() {
	*x = Segment{}
	mi := &file_bidrequest_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Segment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Segment) ProtoMessage() {}

func (x *Segment) ProtoReflect() protoreflect.Message {
	mi := &file_bidrequest_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Segment.ProtoReflect.Descriptor instead.
func (*Segment) Descriptor() ([]byte, []int) {
	return file_bidrequest_proto_rawDescGZIP(), []int{21}
}

func (x *Segment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Segment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Segment) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_bidrequest_proto protoreflect.FileDescriptor

var file_bidrequest_proto_rawDesc = string([]byte{
	0x0a, 0x10, 0x62, 0x69, 0x64, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x05, 0x0a, 0x0a, 0x42, 0x69, 0x64,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x03, 0x69, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x49, 0x6d, 0x70, 0x52, 0x03,
	0x69, 0x6d, 0x70, 0x12, 0x2d, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x52, 0x04, 0x73, 0x69,
	0x74, 0x65, 0x12, 0x2a, 0x0a, 0x03, 0x61, 0x70, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x03, 0x61, 0x70, 0x70, 0x12, 0x33,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6d, 0x61, 0x78, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x6d, 0x61, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x73,
	0x65, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x77, 0x73, 0x65, 0x61, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x73, 0x65, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x62, 0x73, 0x65, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x69, 0x6d, 0x70,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x6c, 0x6c, 0x69, 0x6d, 0x70, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x75, 0x72, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x63,
	0x75, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x77, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x63, 0x61, 0x74,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x62, 0x63, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x61, 0x64, 0x76, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x62, 0x61, 0x64, 0x76,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x70, 0x70, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x62, 0x61, 0x70, 0x70, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x72, 0x65, 0x67,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x65,
	0x6d, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x67, 0x73, 0x52, 0x04, 0x72, 0x65, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x42, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x66, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x66, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x22, 0x1c, 0x0a, 0x04, 0x52, 0x65, 0x67, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x70, 0x70, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x70, 0x70, 0x61, 0x22, 0xf6, 0x04, 0x0a, 0x03, 0x49, 0x6d, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x33, 0x0a, 0x06, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x06,
	0x62, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x6d, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x65,
	0x6d, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x52, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x33, 0x0a, 0x06, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x06, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x2a, 0x0a, 0x03, 0x70, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x2e, 0x50, 0x6d, 0x70, 0x52, 0x03, 0x70, 0x6d, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x73, 0x74, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x69, 0x6e, 0x73, 0x74, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x67, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x69, 0x64, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x62, 0x69, 0x64, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x69, 0x64,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x63, 0x75, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x62, 0x69, 0x64, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x63, 0x75, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x62, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x62, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x78, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x78, 0x70, 0x22, 0x4a, 0x0a,
	0x06, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22, 0xf8, 0x01, 0x0a, 0x06, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0c, 0x0a, 0x01,
	0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x62, 0x61, 0x74, 0x74, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x62,
	0x61, 0x74, 0x74, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x6f, 0x70, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x74, 0x6f, 0x70, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x64,
	0x69, 0x72, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x65, 0x78, 0x70, 0x64, 0x69, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x61,
	0x70, 0x69, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x63, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x76, 0x63, 0x6d, 0x22, 0xec, 0x05, 0x0a, 0x05, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x69, 0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x64, 0x65, 0x6c,
	0x61, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6b,
	0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x6d, 0x69, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6b, 0x69, 0x70, 0x6d, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x6b, 0x69, 0x70, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x73, 0x6b, 0x69, 0x70, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x74, 0x72, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x62, 0x61, 0x74, 0x74, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x61, 0x78, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x62, 0x6f, 0x78, 0x69, 0x6e, 0x67, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x6f, 0x78, 0x69, 0x6e, 0x67, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x13, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x6c,
	0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x15, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f,
	0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x3d, 0x0a, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x61, 0x64, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x70, 0x69, 0x18, 0x18, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xa2, 0x04, 0x0a, 0x05, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x69,
	0x6d, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x64, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x74, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x05, 0x62, 0x61, 0x74, 0x74, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61,
	0x78, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x6e,
	0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d,
	0x69, 0x6e, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78,
	0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d,
	0x61, 0x78, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69,
	0x6f, 0x6e, 0x61, 0x64, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x2e, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69,
	0x6f, 0x6e, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x61, 0x78, 0x73, 0x65, 0x71, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61,
	0x78, 0x73, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x66, 0x65, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x69, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x74, 0x69, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x76, 0x6f, 0x6c, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x6e, 0x76, 0x6f, 0x6c, 0x22, 0x5c, 0x0a, 0x06, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x65, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x03, 0x61, 0x70, 0x69,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x74, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x05, 0x62, 0x61, 0x74, 0x74, 0x72, 0x22, 0x68, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x77, 0x12, 0x0c,
	0x0a, 0x01, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x77, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x77, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x77, 0x6d, 0x69, 0x6e,
	0x22, 0x5f, 0x0a, 0x03, 0x50, 0x6d, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2f, 0x0a, 0x05, 0x64, 0x65, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x05, 0x64, 0x65, 0x61, 0x6c,
	0x73, 0x22, 0x96, 0x01, 0x0a, 0x04, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69,
	0x64, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x62, 0x69,
	0x64, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x69, 0x64, 0x66, 0x6c, 0x6f,
	0x6f, 0x72, 0x63, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x69, 0x64,
	0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x63, 0x75, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x73, 0x65, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x77, 0x73, 0x65, 0x61, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x77, 0x61, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x77, 0x61, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x9c, 0x03, 0x0a, 0x04, 0x53,
	0x69, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x61, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x63, 0x61,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x61,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x63, 0x61, 0x74, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x63, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65,
	0x66, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x6d,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x9f, 0x03, 0x0a, 0x03, 0x41, 0x70,
	0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x75, 0x72,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x75, 0x72,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x61, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03,
	0x63, 0x61, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x63, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x63, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x63, 0x61, 0x74, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x63, 0x61, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x76, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x76, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x52, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64,
	0x65, 0x6d, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x22, 0x59, 0x0a, 0x09, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x61, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x63, 0x61, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xb7, 0x05, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65,
	0x6e, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x73, 0x72, 0x63, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x73, 0x72, 0x63, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x61, 0x74, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x63, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f,
	0x64, 0x71, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x64, 0x71, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x26, 0x0a, 0x0e, 0x71, 0x61, 0x67, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x71, 0x61, 0x67, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x68, 0x69, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x58, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x61, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x63,
	0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xbc, 0x05, 0x0a, 0x06, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x75, 0x61, 0x12, 0x2a, 0x0a, 0x03, 0x67, 0x65, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x47, 0x65, 0x6f, 0x52, 0x03, 0x67, 0x65,
	0x6f, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x64, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6d, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6c, 0x6d, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x6b,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x6b, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x6f, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x73, 0x76, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6f, 0x73, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x77, 0x76, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x68, 0x77, 0x76, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x68, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x77, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x70, 0x69, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x70, 0x70, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x78, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x70, 0x78, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x0e, 0x0a, 0x02, 0x6a, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x6a, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x6c, 0x61, 0x73, 0x68, 0x76, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x6c, 0x61, 0x73, 0x68, 0x76, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x63, 0x63, 0x6d, 0x6e, 0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x63, 0x63, 0x6d, 0x6e, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x66, 0x61, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x66, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x64, 0x69, 0x64, 0x73, 0x68, 0x61, 0x31, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x69, 0x64, 0x73, 0x68, 0x61, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x64,
	0x6d, 0x64, 0x35, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x64, 0x6d, 0x64,
	0x35, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x70, 0x69, 0x64, 0x73, 0x68, 0x61, 0x31, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x70, 0x69, 0x64, 0x73, 0x68, 0x61, 0x31, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x70, 0x69, 0x64, 0x6d, 0x64, 0x35, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x70, 0x69, 0x64, 0x6d, 0x64, 0x35, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x63, 0x73, 0x68,
	0x61, 0x31, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x63, 0x73, 0x68, 0x61,
	0x31, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x63, 0x6d, 0x64, 0x35, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x61, 0x63, 0x6d, 0x64, 0x35, 0x22, 0xc3, 0x02, 0x0a, 0x03, 0x47, 0x65,
	0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x66, 0x69, 0x78,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x66, 0x69, 0x78, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x70, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x69, 0x70, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x66, 0x69, 0x70, 0x73, 0x31, 0x30, 0x34,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x66, 0x69,
	0x70, 0x73, 0x31, 0x30, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x7a, 0x69, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x7a, 0x69,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x74, 0x63, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x74, 0x63, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22,
	0xf3, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x79, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x79, 0x6f, 0x62, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x03, 0x67, 0x65,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x65,
	0x6d, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x47, 0x65,
	0x6f, 0x52, 0x03, 0x67, 0x65, 0x6f, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x62, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x36, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x43, 0x0a, 0x07, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0xad,
	0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x42, 0x0f, 0x42, 0x69, 0x64, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x13, 0x71,
	0x75, 0x61, 0x63, 0x66, 0x6b, 0x61, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x67,
	0x65, 0x6e, 0xa2, 0x02, 0x03, 0x43, 0x44, 0x50, 0xaa, 0x02, 0x13, 0x43, 0x6f, 0x6d, 0x2e, 0x44,
	0x65, 0x6d, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0xca, 0x02,
	0x13, 0x43, 0x6f, 0x6d, 0x5c, 0x44, 0x65, 0x6d, 0x6f, 0x5c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0xe2, 0x02, 0x1f, 0x43, 0x6f, 0x6d, 0x5c, 0x44, 0x65, 0x6d, 0x6f, 0x5c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x15, 0x43, 0x6f, 0x6d, 0x3a, 0x3a, 0x44, 0x65,
	0x6d, 0x6f, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_bidrequest_proto_rawDescOnce sync.Once
	file_bidrequest_proto_rawDescData []byte
)

func file_bidrequest_proto_rawDescGZIP() []byte {
	file_bidrequest_proto_rawDescOnce.Do(func() {
		file_bidrequest_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_bidrequest_proto_rawDesc), len(file_bidrequest_proto_rawDesc)))
	})
	return file_bidrequest_proto_rawDescData
}

var file_bidrequest_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_bidrequest_proto_goTypes = []any{
	(*Bidrequest)(nil),            // 0: com.demo.protoFiles.Bidrequest
	(*Source)(nil),                // 1: com.demo.protoFiles.Source
	(*Regs)(nil),                  // 2: com.demo.protoFiles.Regs
	(*Imp)(nil),                   // 3: com.demo.protoFiles.Imp
	(*Metric)(nil),                // 4: com.demo.protoFiles.Metric
	(*Banner)(nil),                // 5: com.demo.protoFiles.Banner
	(*Video)(nil),                 // 6: com.demo.protoFiles.Video
	(*Audio)(nil),                 // 7: com.demo.protoFiles.Audio
	(*Native)(nil),                // 8: com.demo.protoFiles.Native
	(*Format)(nil),                // 9: com.demo.protoFiles.Format
	(*Pmp)(nil),                   // 10: com.demo.protoFiles.Pmp
	(*Deal)(nil),                  // 11: com.demo.protoFiles.Deal
	(*Site)(nil),                  // 12: com.demo.protoFiles.Site
	(*App)(nil),                   // 13: com.demo.protoFiles.App
	(*Publisher)(nil),             // 14: com.demo.protoFiles.Publisher
	(*Content)(nil),               // 15: com.demo.protoFiles.Content
	(*Producer)(nil),              // 16: com.demo.protoFiles.Producer
	(*Device)(nil),                // 17: com.demo.protoFiles.Device
	(*Geo)(nil),                   // 18: com.demo.protoFiles.Geo
	(*User)(nil),                  // 19: com.demo.protoFiles.User
	(*Data)(nil),                  // 20: com.demo.protoFiles.Data
	(*Segment)(nil),               // 21: com.demo.protoFiles.Segment
	(*timestamppb.Timestamp)(nil), // 22: google.protobuf.Timestamp
}
var file_bidrequest_proto_depIdxs = []int32{
	3,  // 0: com.demo.protoFiles.Bidrequest.imp:type_name -> com.demo.protoFiles.Imp
	12, // 1: com.demo.protoFiles.Bidrequest.site:type_name -> com.demo.protoFiles.Site
	13, // 2: com.demo.protoFiles.Bidrequest.app:type_name -> com.demo.protoFiles.App
	17, // 3: com.demo.protoFiles.Bidrequest.device:type_name -> com.demo.protoFiles.Device
	19, // 4: com.demo.protoFiles.Bidrequest.user:type_name -> com.demo.protoFiles.User
	1,  // 5: com.demo.protoFiles.Bidrequest.source:type_name -> com.demo.protoFiles.Source
	2,  // 6: com.demo.protoFiles.Bidrequest.regs:type_name -> com.demo.protoFiles.Regs
	22, // 7: com.demo.protoFiles.Bidrequest.timestamp:type_name -> google.protobuf.Timestamp
	4,  // 8: com.demo.protoFiles.Imp.metric:type_name -> com.demo.protoFiles.Metric
	5,  // 9: com.demo.protoFiles.Imp.banner:type_name -> com.demo.protoFiles.Banner
	6,  // 10: com.demo.protoFiles.Imp.video:type_name -> com.demo.protoFiles.Video
	7,  // 11: com.demo.protoFiles.Imp.audio:type_name -> com.demo.protoFiles.Audio
	8,  // 12: com.demo.protoFiles.Imp.native:type_name -> com.demo.protoFiles.Native
	10, // 13: com.demo.protoFiles.Imp.pmp:type_name -> com.demo.protoFiles.Pmp
	5,  // 14: com.demo.protoFiles.Video.companionad:type_name -> com.demo.protoFiles.Banner
	5,  // 15: com.demo.protoFiles.Audio.companionad:type_name -> com.demo.protoFiles.Banner
	11, // 16: com.demo.protoFiles.Pmp.deals:type_name -> com.demo.protoFiles.Deal
	14, // 17: com.demo.protoFiles.Site.publisher:type_name -> com.demo.protoFiles.Publisher
	15, // 18: com.demo.protoFiles.Site.content:type_name -> com.demo.protoFiles.Content
	14, // 19: com.demo.protoFiles.App.publisher:type_name -> com.demo.protoFiles.Publisher
	15, // 20: com.demo.protoFiles.App.content:type_name -> com.demo.protoFiles.Content
	16, // 21: com.demo.protoFiles.Content.producer:type_name -> com.demo.protoFiles.Producer
	20, // 22: com.demo.protoFiles.Content.data:type_name -> com.demo.protoFiles.Data
	18, // 23: com.demo.protoFiles.Device.geo:type_name -> com.demo.protoFiles.Geo
	18, // 24: com.demo.protoFiles.User.geo:type_name -> com.demo.protoFiles.Geo
	20, // 25: com.demo.protoFiles.User.data:type_name -> com.demo.protoFiles.Data
	21, // 26: com.demo.protoFiles.Data.segment:type_name -> com.demo.protoFiles.Segment
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_bidrequest_proto_init() }
func file_bidrequest_proto_init() {
	if File_bidrequest_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_bidrequest_proto_rawDesc), len(file_bidrequest_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bidrequest_proto_goTypes,
		DependencyIndexes: file_bidrequest_proto_depIdxs,
		MessageInfos:      file_bidrequest_proto_msgTypes,
	}.Build()
	File_bidrequest_proto = out.File
	file_bidrequest_proto_goTypes = nil
	file_bidrequest_proto_depIdxs = nil
}
